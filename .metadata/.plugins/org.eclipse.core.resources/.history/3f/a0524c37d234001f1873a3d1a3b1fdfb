/*
 * generated by Xtext 2.35.0
 */
package upb.edu.lp.validation;

import org.eclipse.xtext.validation.Check;

import upb.edu.lp.cocinita.Bowl;
import upb.edu.lp.cocinita.Cocina;
import upb.edu.lp.cocinita.CocinitaPackage;
import upb.edu.lp.cocinita.Ingrediente;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CocinitaValidator extends AbstractCocinitaValidator {
	
	@Check
	public void checkASCII(Ingrediente ingrediente) {

		try {
			int asciiValue = ingrediente.getAscii();
			if (asciiValue < 32 || asciiValue > 126) {
				error("ASCII value must be between 33 and 126", CocinitaPackage.Literals.INGREDIENTE__ASCII,
						"invalid-ascii-value");
			}
		} catch (NumberFormatException e) {
			error("Invalid ASCII value", CocinitaPackage.Literals.INGREDIENTE__ASCII, "invalid-ascii-value");
		}

	}

	@Check
	public void verificarTipoDato(Ingrediente ingrediente) {
	    try {
	        int asciiValue = ingrediente.getAscii();
	        String tipoDato = ingrediente.getTipo();
	        
	        if ((asciiValue <= 48  || asciiValue >= 57) && tipoDato.equals("[cU]")) {
	            error("ASCII value must be String for [cU]", CocinitaPackage.Literals.INGREDIENTE__ASCII, "invalid-ascii-value");
	        }
	        
	        else if ((asciiValue < 48 || asciiValue > 57) && tipoDato.equals("[-o]")) {
	            error("ASCII value must be Int for [-o]", CocinitaPackage.Literals.INGREDIENTE__ASCII, "invalid-ascii-value");
	        }

	        else if (tipoDato.equals("[-O]")) {
	            if (asciiValue != 48 || asciiValue != 49) { // '0' or '1' for boolean
	                error("ASCII value must be 0 or 1 for tipo [-O]", CocinitaPackage.Literals.INGREDIENTE__ASCII, "invalid-ascii-value");
	            }
	        }
	    } catch (NumberFormatException e) {
	        error("Invalid ASCII value", CocinitaPackage.Literals.INGREDIENTE__ASCII, "invalid-ascii-value");
	    }
	}

	@Check
	public void checkNumberOfBowl(Bowl bowl, Cocina cocina) {
		try {
			int bowlValue = bowl.getNumero();
			int numberOfBowls = cocina.getNBowl();
			if(bowlValue > numberOfBowls || bowlValue < numberOfBowls) {
				error("Bowl not defined", CocinitaPackage.Literals.INSTRUCCION__BOWL, "invalid-bowl-value");
			}
		}catch (NumberFormatException e) {
			error("Bowl not defined", CocinitaPackage.Literals.INSTRUCCION__BOWL, "invalid-bowl-value");
		}
	} 
}