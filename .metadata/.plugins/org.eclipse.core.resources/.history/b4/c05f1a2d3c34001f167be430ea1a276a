package upb.edu.lp.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import upb.edu.lp.cocinita.Cocina
import upb.edu.lp.cocinita.Ingrediente
import upb.edu.lp.cocinita.Instruccion
import upb.edu.lp.cocinita.Bowl

/**
 * Generador que convierte los modelos de Cocinita a TypeScript.
 */
class CocinitaGenerator extends AbstractGenerator {

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        // Iteramos sobre los contenidos del recurso para encontrar instancias de Cocina
        for (obj : resource.contents) {
            if (obj instanceof Cocina) {
                val cocina = obj as Cocina
                val tsCode = generateTypeScriptCode(cocina)
                fsa.generateFile("${cocina.name}.ts", tsCode)
            }
        }
    }

    private def String generateTypeScriptCode(Cocina cocina) {
        '''
        class «capitalize(cocina.name)» {
            private stack: any[] = [];

            private ingredients = {
                «cocina.listaIngredientes.map[ingrediente | 
                    '''«ingrediente.name»: «getDefaultValueForType(ingrediente.tipo)»'''
                ].join(",\n\t\t")»
            };

            public execute() {
                «cocina.listaInstrucciones.map[instruccion | 
                    generateInstruction(instruccion)
                ].join("\n\t\t")»
            }
        }

        const recipe = new «capitalize(cocina.name)»();
        recipe.execute();
        '''
    }

    private def String generateInstruction(Instruccion instruccion) {
        val tsInstruction = new StringBuilder

        switch instruccion.eClass.name {
            case "Batir":
                tsInstruction.append("this.stack.push(this.stack.pop() + this.stack.pop());")
            case "Licuar":
                tsInstruction.append("this.stack.push(this.stack.pop() / this.stack.pop());")
            case "Hornear":
                tsInstruction.append("this.stack.push(this.stack.pop() * this.stack.pop());")
            case "Refrigerar":
                tsInstruction.append("this.stack.push(this.stack.pop() - this.stack.pop());")
            case "Agregar":
                if (instruccion.ingrediente != null) {
                    tsInstruction.append("this.stack.push(this.ingredients['${instruccion.ingrediente.name}']);")
                } else if (instruccion.exp != null) {
                    // Chequeamos si la expresión es un ingrediente o un bowl
                    if (instruccion.expresion.ingrediente != null) {
                        tsInstruction.append("this.stack.push(this.ingredients['${instruccion.expresion.ingrediente.name}']);")
                    } else if (instruccion.expresion.bowl != null) {
                        tsInstruction.append("this.stack.push(this.stack[${instruccion.expresion.bowl.numero - 1}]);")
                    }
                }
        }

        tsInstruction.toString
    }

    private def String getDefaultValueForType(String tipo) {
        switch tipo {
            case "[-o]":
                "0" // Int
            case "[cU]":
                "\"\"" // String
            case "[-O]":
                "false" // Boolean
            default:
                "null"
        }
    }

    // Función auxiliar para capitalizar nombres de clases
    private def String capitalize(String name) {
        if (name == null || name.isEmpty) return name
        return name.substring(0, 1).toUpperCase + name.substring(1)
    }
}
