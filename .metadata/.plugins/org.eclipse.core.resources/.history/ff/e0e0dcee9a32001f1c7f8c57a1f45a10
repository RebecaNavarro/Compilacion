/*
 * generated by Xtext 2.35.0
 */
package upb.edu.lp.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import upb.edu.lp.miniLengCom.Program
import java.util.function.Function
import java.beans.Expression

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MiniLengComGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		
		val p = resource.allContents.head as Program
		fsa.generateFile(p.name + '.java', generateProgram(p))
	}
	
	def generateProgram(Program p) '''
		public class «p.name»{
			«FOR f :p.func» «generateFunction(f)»«ENDFOR»
			public static void main(String[] args){
				System.out.println(«generateExpression(p.ejecucion)»);
			}
		}
	'''
	
	def generateFunction(Function function)'''
		«function.name»
	'''
	
	def generateExpression(Expression expression)'''expr'''
	
}
