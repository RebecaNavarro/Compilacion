/*
 * generated by Xtext 2.35.0
 */
package upb.edu.lp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import upb.edu.lp.ide.contentassist.antlr.internal.InternalCocinitaParser;
import upb.edu.lp.services.CocinitaGrammarAccess;

public class CocinitaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CocinitaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CocinitaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTipoVariableAccess().getAlternatives(), "rule__TipoVariable__Alternatives");
			builder.put(grammarAccess.getInstruccionAccess().getAlternatives(), "rule__Instruccion__Alternatives");
			builder.put(grammarAccess.getExpresionAccess().getAlternatives(), "rule__Expresion__Alternatives");
			builder.put(grammarAccess.getCocinaAccess().getGroup(), "rule__Cocina__Group__0");
			builder.put(grammarAccess.getCocinaAccess().getGroup_9(), "rule__Cocina__Group_9__0");
			builder.put(grammarAccess.getIngredienteAccess().getGroup(), "rule__Ingrediente__Group__0");
			builder.put(grammarAccess.getBowlAccess().getGroup(), "rule__Bowl__Group__0");
			builder.put(grammarAccess.getInstruccionAccess().getGroup_0(), "rule__Instruccion__Group_0__0");
			builder.put(grammarAccess.getInstruccionAccess().getGroup_1(), "rule__Instruccion__Group_1__0");
			builder.put(grammarAccess.getInstruccionAccess().getGroup_2(), "rule__Instruccion__Group_2__0");
			builder.put(grammarAccess.getInstruccionAccess().getGroup_3(), "rule__Instruccion__Group_3__0");
			builder.put(grammarAccess.getInstruccionAccess().getGroup_4(), "rule__Instruccion__Group_4__0");
			builder.put(grammarAccess.getCocinaAccess().getNameAssignment_1(), "rule__Cocina__NameAssignment_1");
			builder.put(grammarAccess.getCocinaAccess().getListaIngredientesAssignment_3(), "rule__Cocina__ListaIngredientesAssignment_3");
			builder.put(grammarAccess.getCocinaAccess().getNBowlAssignment_5(), "rule__Cocina__NBowlAssignment_5");
			builder.put(grammarAccess.getCocinaAccess().getListaInstruccionesAssignment_8(), "rule__Cocina__ListaInstruccionesAssignment_8");
			builder.put(grammarAccess.getCocinaAccess().getBowlAssignment_9_1(), "rule__Cocina__BowlAssignment_9_1");
			builder.put(grammarAccess.getIngredienteAccess().getAsciiAssignment_0(), "rule__Ingrediente__AsciiAssignment_0");
			builder.put(grammarAccess.getIngredienteAccess().getTipoAssignment_1(), "rule__Ingrediente__TipoAssignment_1");
			builder.put(grammarAccess.getIngredienteAccess().getNameAssignment_2(), "rule__Ingrediente__NameAssignment_2");
			builder.put(grammarAccess.getBowlAccess().getNumeroAssignment_1(), "rule__Bowl__NumeroAssignment_1");
			builder.put(grammarAccess.getInstruccionAccess().getExpAssignment_0_1(), "rule__Instruccion__ExpAssignment_0_1");
			builder.put(grammarAccess.getInstruccionAccess().getBowlAssignment_0_4(), "rule__Instruccion__BowlAssignment_0_4");
			builder.put(grammarAccess.getInstruccionAccess().getExpAssignment_1_1(), "rule__Instruccion__ExpAssignment_1_1");
			builder.put(grammarAccess.getInstruccionAccess().getBowlAssignment_1_4(), "rule__Instruccion__BowlAssignment_1_4");
			builder.put(grammarAccess.getInstruccionAccess().getExpAssignment_2_1(), "rule__Instruccion__ExpAssignment_2_1");
			builder.put(grammarAccess.getInstruccionAccess().getBowlAssignment_2_4(), "rule__Instruccion__BowlAssignment_2_4");
			builder.put(grammarAccess.getInstruccionAccess().getExpAssignment_3_1(), "rule__Instruccion__ExpAssignment_3_1");
			builder.put(grammarAccess.getInstruccionAccess().getBowlAssignment_3_4(), "rule__Instruccion__BowlAssignment_3_4");
			builder.put(grammarAccess.getInstruccionAccess().getIngredienteAssignment_4_1(), "rule__Instruccion__IngredienteAssignment_4_1");
			builder.put(grammarAccess.getInstruccionAccess().getBowlAssignment_4_4(), "rule__Instruccion__BowlAssignment_4_4");
			builder.put(grammarAccess.getExpresionAccess().getIngredienteAssignment_0(), "rule__Expresion__IngredienteAssignment_0");
			builder.put(grammarAccess.getExpresionAccess().getBowlAssignment_1(), "rule__Expresion__BowlAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CocinitaGrammarAccess grammarAccess;

	@Override
	protected InternalCocinitaParser createParser() {
		InternalCocinitaParser result = new InternalCocinitaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CocinitaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CocinitaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
