/*
 * generated by Xtext 2.35.0
 */
package upb.edu.lp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CocinitaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CocinaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "upb.edu.lp.Cocinita.Cocina");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRECIPEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIngredientesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListaIngredientesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListaIngredientesIngredienteParserRuleCall_3_0 = (RuleCall)cListaIngredientesAssignment_3.eContents().get(0);
		private final Keyword cProcedimientoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Cocina:
		//    '[RECIPE]' name = ID
		//    'Ingredientes:'
		//    ListaIngredientes += Ingrediente*
		//    'Procedimiento:'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[RECIPE]' name = ID
		//'Ingredientes:'
		//ListaIngredientes += Ingrediente*
		//'Procedimiento:'
		public Group getGroup() { return cGroup; }
		
		//'[RECIPE]'
		public Keyword getRECIPEKeyword_0() { return cRECIPEKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Ingredientes:'
		public Keyword getIngredientesKeyword_2() { return cIngredientesKeyword_2; }
		
		//ListaIngredientes += Ingrediente*
		public Assignment getListaIngredientesAssignment_3() { return cListaIngredientesAssignment_3; }
		
		//Ingrediente
		public RuleCall getListaIngredientesIngredienteParserRuleCall_3_0() { return cListaIngredientesIngredienteParserRuleCall_3_0; }
		
		//'Procedimiento:'
		public Keyword getProcedimientoKeyword_4() { return cProcedimientoKeyword_4; }
	}
	public class IngredienteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "upb.edu.lp.Cocinita.Ingrediente");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAsciiAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAsciiINTTerminalRuleCall_0_0 = (RuleCall)cAsciiAssignment_0.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoVariableParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Ingrediente:
		//    ascii=INT tipo=TipoVariable name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ascii=INT tipo=TipoVariable name=ID
		public Group getGroup() { return cGroup; }
		
		//ascii=INT
		public Assignment getAsciiAssignment_0() { return cAsciiAssignment_0; }
		
		//INT
		public RuleCall getAsciiINTTerminalRuleCall_0_0() { return cAsciiINTTerminalRuleCall_0_0; }
		
		//tipo=TipoVariable
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }
		
		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_1_0() { return cTipoTipoVariableParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class TipoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "upb.edu.lp.Cocinita.TipoVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCUKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TipoVariable:
		//    '[-o]' | '[cU]' | '[-O]'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[-o]' | '[cU]' | '[-O]'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[-o]'
		public Keyword getOKeyword_0() { return cOKeyword_0; }
		
		//'[cU]'
		public Keyword getCUKeyword_1() { return cCUKeyword_1; }
		
		//'[-O]'
		public Keyword getOKeyword_2() { return cOKeyword_2; }
	}
	
	
	private final CocinaElements pCocina;
	private final IngredienteElements pIngrediente;
	private final TipoVariableElements pTipoVariable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CocinitaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCocina = new CocinaElements();
		this.pIngrediente = new IngredienteElements();
		this.pTipoVariable = new TipoVariableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("upb.edu.lp.Cocinita".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Cocina:
	//    '[RECIPE]' name = ID
	//    'Ingredientes:'
	//    ListaIngredientes += Ingrediente*
	//    'Procedimiento:'
	//;
	public CocinaElements getCocinaAccess() {
		return pCocina;
	}
	
	public ParserRule getCocinaRule() {
		return getCocinaAccess().getRule();
	}
	
	//Ingrediente:
	//    ascii=INT tipo=TipoVariable name=ID
	//;
	public IngredienteElements getIngredienteAccess() {
		return pIngrediente;
	}
	
	public ParserRule getIngredienteRule() {
		return getIngredienteAccess().getRule();
	}
	
	//TipoVariable:
	//    '[-o]' | '[cU]' | '[-O]'
	//;
	public TipoVariableElements getTipoVariableAccess() {
		return pTipoVariable;
	}
	
	public ParserRule getTipoVariableRule() {
		return getTipoVariableAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
