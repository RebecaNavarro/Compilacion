/*
 * generated by Xtext 2.35.0
 */
package upb.edu.lp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MiniLengComGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "upb.edu.lp.MiniLengCom.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		///*Model:
		//    greetings += Greeting+; //lista de greetings
		//Greeting:
		//    'Hello' name=ID '!';
		//Hello Alexis!
		//Hello People!
		//Hello Yaaaaa!
		//*/
		///*
		//Super_Programa
		//Declaraciones:
		//    //Declaramos funciones, todas serÃ¡n de tipo int y devolverÃ­an algo
		//    f(x) = x+1;
		//    g(x,y) = x*y;
		//    h(x) = g(4,f(x));
		//Ejecucion:
		//    h(2);
		//    //Varias declaraciones y una ejecucion, que tienen nombres de funciones, parentesis,
		//    //una variable, un igual y de ahÃ­ expresiones aritmÃ©ticas
		//*/
		///*
		//Program:
		//    name = ID //id de tipo string
		//    'Declaraciones:'
		//    func += Function*
		//    'Ejecucion:'
		//    ejecucion = Expression';'
		//;
		//Function:
		//    name =  ID '(' (params+= Parameter (',' params+= Parameter)*)? ')'
		//    '=' eval = Expression ';'
		//;
		//Expression:
		//    ValueExpression | FunctionCall
		//;
		//ValueExpression:
		//    value = INT
		//;
		//FunctionCall:
		//    function = [Function] '(' (args+= Expression (',' args+= Expression)*)? ')'
		//    //ya esta declarada mÃ¡s arriba
		//;
		//Parameter:
		//    name = ID
		//;*/
		//Model:
		//    greetings+=Greeting*;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=Greeting*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "upb.edu.lp.MiniLengCom.Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHighSurrogatesD83dLowSurrogatesDe0aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//    'hello' name= ID'ðŸ˜Š';
		@Override public ParserRule getRule() { return rule; }
		
		//'hello' name= ID'ðŸ˜Š'
		public Group getGroup() { return cGroup; }
		
		//'hello'
		public Keyword getHelloKeyword_0() { return cHelloKeyword_0; }
		
		//name= ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'ðŸ˜Š'
		public Keyword getHighSurrogatesD83dLowSurrogatesDe0aKeyword_2() { return cHighSurrogatesD83dLowSurrogatesDe0aKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniLengComGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("upb.edu.lp.MiniLengCom".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*Model:
	//    greetings += Greeting+; //lista de greetings
	//Greeting:
	//    'Hello' name=ID '!';
	//Hello Alexis!
	//Hello People!
	//Hello Yaaaaa!
	//*/
	///*
	//Super_Programa
	//Declaraciones:
	//    //Declaramos funciones, todas serÃ¡n de tipo int y devolverÃ­an algo
	//    f(x) = x+1;
	//    g(x,y) = x*y;
	//    h(x) = g(4,f(x));
	//Ejecucion:
	//    h(2);
	//    //Varias declaraciones y una ejecucion, que tienen nombres de funciones, parentesis,
	//    //una variable, un igual y de ahÃ­ expresiones aritmÃ©ticas
	//*/
	///*
	//Program:
	//    name = ID //id de tipo string
	//    'Declaraciones:'
	//    func += Function*
	//    'Ejecucion:'
	//    ejecucion = Expression';'
	//;
	//Function:
	//    name =  ID '(' (params+= Parameter (',' params+= Parameter)*)? ')'
	//    '=' eval = Expression ';'
	//;
	//Expression:
	//    ValueExpression | FunctionCall
	//;
	//ValueExpression:
	//    value = INT
	//;
	//FunctionCall:
	//    function = [Function] '(' (args+= Expression (',' args+= Expression)*)? ')'
	//    //ya esta declarada mÃ¡s arriba
	//;
	//Parameter:
	//    name = ID
	//;*/
	//Model:
	//    greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greeting:
	//    'hello' name= ID'ðŸ˜Š';
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
